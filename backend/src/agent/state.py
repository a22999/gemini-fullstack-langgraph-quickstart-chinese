# =============================================================================
# LangGraph 智能研究代理 - 状态管理模块
# =============================================================================
# 本文件定义了整个研究流程中使用的各种状态类型，实现了：
# 1. 全局状态管理：OverallState - 跨节点的数据共享和持久化
# 2. 专用状态类型：各个处理阶段的特定状态结构
# 3. 状态注解机制：使用 LangGraph 的状态合并策略
# 4. 类型安全：通过 TypedDict 确保状态结构的一致性
# =============================================================================

from __future__ import annotations

# 数据类和类型定义
from dataclasses import dataclass, field
from typing import TypedDict

# LangGraph 状态管理
from langgraph.graph import add_messages
from typing_extensions import Annotated

# 操作符用于状态合并策略
import operator


# =============================================================================
# 全局状态类 - OverallState
# =============================================================================
# 这是整个研究流程的核心状态容器，包含所有节点间共享的数据
# 使用 Annotated 类型和操作符定义状态合并策略，确保数据一致性
# =============================================================================
class OverallState(TypedDict):
    """
    【全局状态管理】
    整个智能研究代理的核心状态容器，贯穿所有处理节点。
    
    状态合并策略说明：
    - add_messages: LangGraph 内置的消息合并策略，自动处理消息历史
    - operator.add: 列表追加策略，新数据会追加到现有列表末尾
    - 普通字段: 直接覆盖策略，新值替换旧值
    """
    # 消息历史：用户输入和AI回复的完整对话记录
    # 使用 add_messages 策略自动管理消息的添加和去重
    messages: Annotated[list, add_messages]
    
    # 搜索查询列表：所有生成的搜索查询（包括初始查询和后续查询）
    # 使用 operator.add 策略，新查询会追加到现有列表
    search_query: Annotated[list, operator.add]
    
    # 网络研究结果：所有搜索执行后的结果内容
    # 使用 operator.add 策略，新结果会追加到现有列表
    web_research_result: Annotated[list, operator.add]
    
    # 信息源收集：所有引用的网络资源和链接
    # 使用 operator.add 策略，新源会追加到现有列表
    sources_gathered: Annotated[list, operator.add]
    
    # 配置参数：控制研究流程的各种设置
    initial_search_query_count: int  # 初始搜索查询数量
    max_research_loops: int          # 最大研究循环次数
    research_loop_count: int         # 当前研究循环计数
    reasoning_model: str             # 推理模型名称


# =============================================================================
# 反思状态类 - ReflectionState
# =============================================================================
# 用于反思评估阶段的专用状态，包含研究充分性判断和后续行动建议
# =============================================================================
class ReflectionState(TypedDict):
    """
    【反思评估状态】
    反思评估节点的专用状态，用于判断研究完整性和生成后续查询。
    
    这个状态包含了智能决策所需的所有信息，支持系统的自适应研究能力。
    """
    # 研究充分性判断：当前收集的信息是否足够回答用户问题
    is_sufficient: bool
    
    # 知识空白描述：识别出的信息缺口和需要补充的内容
    knowledge_gap: str
    
    # 后续查询建议：基于知识空白生成的针对性搜索查询
    # 使用 operator.add 策略，支持多轮反思生成的查询累积
    follow_up_queries: Annotated[list, operator.add]
    
    # 循环控制参数
    research_loop_count: int      # 当前研究循环次数
    number_of_ran_queries: int    # 已执行的查询总数


# =============================================================================
# 查询对象类 - Query
# =============================================================================
# 单个搜索查询的结构化表示，包含查询内容和生成理由
# =============================================================================
class Query(TypedDict):
    """
    【搜索查询对象】
    单个搜索查询的结构化表示，提供查询内容和生成依据。
    
    这种结构化设计有助于：
    1. 查询质量评估和优化
    2. 调试和日志记录
    3. 查询去重和相似性检测
    """
    # 具体的搜索查询字符串
    query: str
    
    # 生成该查询的理由和依据
    rationale: str


# =============================================================================
# 查询生成状态类 - QueryGenerationState
# =============================================================================
# 查询生成阶段的输出状态，包含生成的所有搜索查询
# =============================================================================
class QueryGenerationState(TypedDict):
    """
    【查询生成状态】
    查询生成节点的输出状态，包含所有生成的搜索查询列表。
    
    这个状态作为查询生成和网络研究之间的数据桥梁。
    """
    # 生成的搜索查询列表，每个查询都是一个 Query 对象
    search_query: list[Query]


# =============================================================================
# 网络搜索状态类 - WebSearchState
# =============================================================================
# 单个网络搜索任务的状态，用于并行搜索的数据传递
# =============================================================================
class WebSearchState(TypedDict):
    """
    【网络搜索状态】
    单个网络搜索任务的状态容器，用于并行搜索的数据传递。
    
    每个并行的搜索任务都会接收这样一个状态对象，
    确保搜索结果能够正确关联到原始查询。
    """
    # 要执行的搜索查询字符串
    search_query: str
    
    # 搜索任务的唯一标识符，用于结果追踪和去重
    id: str


# =============================================================================
# 搜索输出状态类 - SearchStateOutput
# =============================================================================
# 最终输出状态的数据类，包含研究报告等最终结果
# =============================================================================
@dataclass(kw_only=True)
class SearchStateOutput:
    """
    【搜索输出状态】
    整个研究流程的最终输出状态，包含生成的研究报告。
    
    使用 dataclass 提供更灵活的数据结构和默认值处理。
    """
    # 最终生成的研究报告摘要
    running_summary: str = field(default=None)
