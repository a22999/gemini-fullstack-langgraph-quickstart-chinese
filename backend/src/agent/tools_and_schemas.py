# =============================================================================
# 工具和结构化输出模式定义 - tools_and_schemas.py
# =============================================================================
# 本文件定义了LangGraph代理使用的结构化输出模式
# 确保AI输出的数据格式标准化和可解析性
# 
# 主要包含：
# 1. SearchQueryList - 搜索查询列表模式
# 2. Reflection - 反思评估结果模式
# =============================================================================

from typing import List
from pydantic import BaseModel, Field


# =============================================================================
# 1. 搜索查询列表模式 - SearchQueryList
# =============================================================================
# 用于查询生成流程的结构化输出
# 确保生成的搜索查询格式统一且包含合理性说明
# =============================================================================
class SearchQueryList(BaseModel):
    """搜索查询列表的结构化模式
    
    用于查询生成流程，确保AI生成的搜索查询列表格式标准化
    包含查询列表和生成理由，便于后续处理和验证
    """
    query: List[str] = Field(
        description="用于网络研究的搜索查询列表"
    )
    rationale: str = Field(
        description="简要说明这些查询与研究主题相关的原因"
    )


# =============================================================================
# 2. 反思评估结果模式 - Reflection
# =============================================================================
# 用于反思评估流程的结构化输出
# 确保AI能够标准化地评估研究完整性并生成后续查询
# =============================================================================
class Reflection(BaseModel):
    """反思评估结果的结构化模式
    
    用于反思评估流程，确保AI能够标准化地：
    1. 判断当前研究是否充分
    2. 识别知识空白
    3. 生成针对性的后续查询
    """
    is_sufficient: bool = Field(
        description="提供的摘要是否足以回答用户的问题"
    )
    knowledge_gap: str = Field(
        description="描述缺失或需要澄清的信息"
    )
    follow_up_queries: List[str] = Field(
        description="用于解决知识空白的后续查询列表"
    )
